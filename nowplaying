#!/usr/bin/env sh

# nowplaying.sh – A simple, POSIX-compliant shell script to print the
# "Now Playing" status of a local Plex Server to stdout.
#
# Copyright 2022 Justin Teague <arcadellama@posteo.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the “Software”),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHE
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# shellcheck disable=2034

export LC_ALL=C

########################################################################
## Global Read-only Variables
########################################################################
NP_PRGNAM="nowplaying-for-plex"
NP_VERSION="current"

## Default config locations
NP_CONFIG_FILENAME="${NP_PRGNAM}.conf"
NP_DEFAULT_CONFIGS="
${HOME}/.config/${NP_CONFIG_FILENAME}
${HOME}/.local/{$NP_PRGNAM}/${NP_CONFIG_FILENAME
/usr/local/etc/${NP_CONFIG_FILENAME}
/etc/${NP_CONFIG_FILENAME}
"

########################################################################
## Global Display Text and Color Variables
########################################################################
NP_HW_TRANSCODE_SYMBOL="•"         # Symbol to show hardware transcode
NP_SW_TRANSCODE_SYMBOL="◦"         # Symbol to show software transcode

## Text Color Definitions
TBLACK="\033[30m"
TRED="\033[31m"
TGREEN="\033[32m"
TYELLOW="\033[33m"
TBLUE="\033[34m"
TMAGENTA="\033[35m"
TCYAN="\033[36m"
TWHITE="\033[37m"
 
## Text Effect Definitions
TBOLD="\033[1m"
TITALIC="\033[3m"
TUNDERLINE="\033[4m"

## Reset text colors/effects
TRESET="\033[m"

## Color Output Options
NP_MOVIE_COLOR="$TBLUE"
NP_EPISODE_COLOR="$TCYAN"
NP_SONG_COLOR="$TMAGENTA"
NP_TRANSCODE_COLOR="$TGREEN"
NP_LOG_COLOR="$TGREEN"
NP_LOG_WARN_COLOR="$TYELLOW"
NP_LOG_ERROR_COLOR="$TRED"

########################################################################
## String Manipulation Functions
########################################################################

## Functions
get_conf() {
    __conffile="$1"
    ## Global configuration options
    NP_PLEX_HOST=""
    NP_PLEX_PORT=""
    NP_PLEX_TOKEN="" 
    NP_MAX_WIDTH=""
    NP_COLOR_MODE=""

    if [ -r "$__conffile" ]; then
       while IFS='=' read -r key val; do
            # Skip over lines containing comments.
            [ "${key##\#*}" ] || continue
              case "$key" in

                  NP_PLEX_HOST) plex_host="$val" ;;
                  NP_PLEX_PORT) plex_port="$val" ;;
                 NP_PLEX_TOKEN) plex_token="$val" ;;
                  NP_MAX_WIDTH) max_width="$val" ;;
                 NP_COLOR_MODE) color="$val" ;;

              esac
          done < "$__conffile"
    fi
}

color_check() {
    case "$color" in
        true|yes|on)
            return 0 ;;
       false|off|no)
            return 1 ;;
                  *)
            if [ -x "$(command -v tput)" ]; then
                if [ "$(tput colors)" ]; then
                    return 0
                fi
            fi
            return 1 ;;
    esac
}

set_color() {
    # Usage: set_color "string" "$color" "$effect" "$effect"
    __item="$1"
    __color="$2"
    __fx1="$3"
    __fx2="$4"

    if [ -n "$__fx2" ]; then
        printf "%b%b%b%s%b" "$__fx1" "$__fx2" "$__color" "$__item" "$TRESET"
        return
    elif [ -n "$__fx1" ]; then
        printf "%b%b%s%b" "$__fx1" "$__color" "$__item" "$TRESET"
        return
    elif [ -n "$__color" ]; then
        printf "%b%s%b" "$__color" "$__item" "$TRESET"
        return
    fi
    # Don't error-out if args aren't passed
    printf "%s" "$__item"
}

log() {
    __message="$1"  # Input variable
    __prefix="[$NP_PRGNAM]: "

    if color_check; then
        set_color "$__prefix" "$NP_LOG_COLOR" "$TBOLD"
    else
        printf "%s" "$__prefix"
    fi
    printf "%s\n" "$__message"
}

log_error() {
    __message="$1"  # Input variable
    __prefix="[$NP_PRGNAM] Error: "

    if color_check; then
        set_color "$__prefix" "$NP_LOG_ERROR_COLOR" "$TBOLD"
    else
        printf "%s" "$__prefix"
    fi
    printf "%s\n" "$__message"
}
dependency_check() {
    if [ -n "$skip_checks" ]; then
        if [ -x "$dl_agent" ]; then
            return 0
        else
            log_error "$(printf "%s" "Download agent not found. " \
                "Is curl, wget, fetch, or nc installed?")"
            return 1
        fi
    fi

    for __dla in curl wget fetch nc; do
        if [ -x "$(command -v "$__dla")" ]; then
        dl_agent="$(command -v "$__dla")"
        return 0
        fi
    done
    
    log_error "curl, wget, fetch, or nc not found."
    exit 1
}

check_conf() {
    __conf=""
    # disable globbing
    set -f
    # shellcheck disable=2086
    set -- ${NP_DEFAULT_CONFIGS}
    for __conf in "$@"; do
        if [ -r "$__conf" ]; then
            get_conf "$__conf"
            set +f
            return
        fi
    done
    set +f
}

get_item() {
    # Input variables
    __item="$1"
    __line="$2"

    set -f
    oldIFS=$IFS
    IFS='"'
    # shellcheck disable=2086
    set -- ${__line}
    while [ "$#" -gt 0 ]; do
        case "${1## }" in
            "$__item"=)
                printf "%s\n" "$2"
                shift 2 ;;
            *)
                shift ;;
        esac
    done
    IFS=$oldIFS
    set +f
}

truncate_string() {
    # Input variables
    __string="$1"
    __width="$2"
    __count="$(((${#__string} - __width) + 3))" # 3 additional for elipses

    while [ "$__count" -gt 0 ]; do
        __string="${__string%?}"
        __count="$((__count - 1))"
    done

    printf "%s..." "$__string"
}

print_delim() {
    __word="$1"
    __width="$2"
    __count=$((__width - __word))

    while [ "$__count" -gt 0 ]; do
        printf "%s" "$dot_leader"
        __count=$((__count - 1))
    done
}

fix_apostrophe() {
    __input="$1"
    __oldIFS=$IFS
    set -f
    IFS='&'
    # shellcheck disable=2086
    set -- ${__input}
    case "$2" in
        \#39\;*)
            IFS=$__oldIFS
            printf "%s'%s" "$1" "${2##\#39\;}"
            ;;
              *)
            printf "%s" "$1"
            ;;
    esac
    set +f
}

download_xml() {
    # Input variables passed from get_plexml()
    __host="$1"
    __path="$2"

    # Local variable
    __url="http://${__host}:${plex_port}${__path}"

    case "$dl_agent" in
        *curl)
            "$dl_agent" -m "$timeout" -s "$__url"
             return "$?"
            ;;
         *wget)
            "$dl_agent" -T "$timeout" -qO - "$__url"
            return "$?" 
            ;;
         *fetch)
            "$dl_agent" -T "$timeout" -qO - "$__url"
            return "$?" 
            ;;
          *nc)
            printf "GET %s HTTP/1.0\r\n\r\n" "$__path" | \
                "$dl_agent" -w "$timeout" "$__host" "$plex_port"
             return "$?"
            ;;
        esac
}

get_plexml() {
    ## Input variables passed from main()
    __type="$1" # either server or session
    __host="$2"

    ## Local variables
    __path=""
    __url=""

    case "$__type" in
        server)
            __path="$server_path"
            ;;
        session)
            __path="${server_path}${session_path}"
            ;;
    esac

    if [ -n "$plex_token" ]; then
        __path="${__path}${token_arg}${plex_token}"
    fi

    # Download the xml
    download_xml "$__host" "$__path"
}

print_nowplaying() {
    # Input variables from parse_session_xml
    __number="$1"
    __album="$(fix_apostrophe "$2")"
    __title="$(fix_apostrophe "$3")"
    __user="$4"
    __type="$5"
    __transcode="$6"

    # Local variables
    __track="$__title"
    __columns=""

    # Set column width
    if [ "$(command -v tput)" ]; then
	__columns="$("$(command -v tput)" cols)"
        if [ "$max_width" -ne 0 ] && [ "$__columns" -gt "$max_width" ]; then
	        __columns="$max_width"
	    fi
    else
        if [ "$max_width" -ne 0 ]; then
            __columns="$max_width"
        else
            __columns="80"
        fi
    fi

    __col1="$((${#__count} + 1))"
    __col3="$((${#__user} + 1))"
    __col2="$((__columns - (__col3 + __col1) - 4))"

    # Set global color
    if color_check; then
        __transcode="$(set_color "$__transcode" "$NP_TRANSCODE_COLOR" "$TBOLD")"
    fi

    case "$__type" in
        episode)
              # TV Episodes 
              __title="${__album}: ${__track}"

              # If it doesn't fit, spread over two lines
              if [ "${#__title}" -gt "$__col2" ]; then

                  if [ "${#__album}" -gt "$__col2" ]; then
                  __album="$(truncate_string "$__album" "$__col2")"
                  fi

                  if [ "${#__track}" -gt "$__col2" ]; then
                  __track="$(truncate_string "$__track" "$__col2")"
                  fi

                  __album="${__album}:"

                __output="$(printf "%${__col1}s %-${__col2}s%${__col3}s\n" \
                      "$__number." "$__album" "";  
                      printf "%${__col1}s %-${__col2}s%${__col3}s\n" \
                      "" "$__track $(print_delim ${#__track} ${__col2})" \
                      "$__user $__transcode")"
               else

                # Otherwise everything on one line
                __output="$(printf "%${__col1}s %-${__col2}s%${__col3}s\n" \
                  "$__number." \
                  "$__title $(print_delim ${#__title} ${__col2})" \
                  "$__user $__transcode")"

              fi
              if color_check; then
                __output="$(set_color "$__output" "$NP_EPISODE_COLOR" "$TBOLD")"
              fi
            ;;

          track)
              # Song tracks
              __title="${__album}: ${__track}"

              # If it doesn't fit, spread over two lines
              if [ "${#__title}" -gt "$__col2" ]; then

                  if [ "${#__album}" -gt "$__col2" ]; then
                  __album="$(truncate_string "$__album" "$__col2")"
                  fi

                  if [ "${#__track}" -gt "$__col2" ]; then
                  __track="$(truncate_string "$__track" "$__col2")"
                  fi

		          __album="${__album}:"

               # 2 lines
                __output="$(printf "%${__col1}s %-${__col2}s%${__col3}s\n" \
                      "$__number." "$__album" "";
                  printf "%${__col1}s %-${__col2}s%${__col3}s\n" \
                      "" "$__track $(print_delim ${#__track} ${__col2})" \
                      "$__user $__transcode")"
                else

                # All on one line
                __output="$(printf "%${__col1}s %-${__col2}s%${__col3}s\n" \
                      "$__number." \
                      "$__title $(print_delim ${#__title} ${__col2})" \
                      "$__user $__transcode")"

              fi
              if color_check; then
                __output="$(set_color "$__output" "$NP_SONG_COLOR" "$TBOLD")"
              fi
            ;;

          movie)
              # Movies

              if [ "${#__title}" -gt "$__col2" ]; then
                  __title="$(truncate_string "$__title" "$__col2")"
              fi
              __output="$(printf "%${__col1}s %-${__col2}s%${__col3}s\n" \
                  "$__number." \
                  "$__title $(print_delim ${#__title} ${__col2})" \
                  "$__user $__transcode")"
              if color_check; then
                __output="$(set_color "$__output" "$NP_MOVIE_COLOR" "$TBOLD")"
              fi
            ;;
    esac
    # Final print to screen
    printf "%s\n" "$__output"
}

parse_server_xml() {
    # Input variable from main
    __server_xml="$1"
    __host="$2" # not currently used,
    while IFS= read -r line; do
        case "$line" in
            *"401 Unauthorized"*)
                __errorMessage="Unauthorized access to $__host. "
                if [ -n "$plex_token" ]; then
                    log_error "$__errorMessage Invalid PLEX AUTH TOKEN."
                else
                    log_error "$__errorMessage $(printf "%s" \
                        "See the README on how to get a PLEX AUTH TOKEN")"
                fi
                exit 1
                ;;
            *friendlyName*)
                friendly_name="$(get_item "friendlyName" "$line")"
                return
                ;;
        esac
    done << EOF
"$__server_xml"
EOF
}

parse_session_xml() {
    # Input variable from main
    __session_xml="$1"
    __host="$2"

    # Local variables
    __welcome_msg="Now Playing on $friendly_name: "
    __user="local" # Defaults to local for non-plex accounts
    __title=""
    __album=""
    __type=""
    __transcode=""
    __transcode_symbol=""
    __trans_type=""
    __count=0

    while IFS= read -r line; do
        case "$line" in
            ?Video*|?Track*)
                __type="$(get_item "type" "$line")"
                __album="$(get_item "grandparentTitle" "$line")"
                __title="$(get_item "title" "$line")"
                session_count="$((session_count+1))"
                ;;

            *User\ id*)
                __user="$(get_item "title" "$line")"
                ;;

            *TranscodeSession*)
                __trans_type=$(get_item "transcodeHwFullPipeline" "$line")
                if [ "$__trans_type" -eq 1 ]; then
                    __transcode_symbol="$NP_HW_TRANSCODE_SYMBOL"
                else
                    __transcode_symbol="$NP_SW_TRANSCODE_SYMBOL"
                fi
                __transcode="$__transcode_symbol"
                ;;

            */Video*|*/Track*)
                # Check if this is the first item
                if [ "$__count" -eq 0 ]; then
                        printf "\n"

                    if color_check; then
                        __welcome_msg="$(set_color \
                            "$__welcome_msg" "$TWHITE" "$TITALIC" "$TBOLD")"
                    fi
                        printf "%s\n" "$__welcome_msg"
                    __count="$((__count+1))"
                fi

                ###### Print to screen! #####
                print_nowplaying "$__count" "$__album" \
                    "$__title" "$__user" "$__type" "$__transcode"
                __count="$((__count+1))"
                ;;
            */MediaContainer*)
                # Check if end of xml file
                if [ "$session_count" -gt 0 ]; then
                    printf "\n"
                fi
                ;;
        esac
    done << EOF
"$__session_xml"
EOF

     if [ -n "$verbose" ] && [ "$__count" -eq 0 ]; then
         log "Nothing playing on $friendly_name ($__host)"
     fi
}

print_help() {
cat <<EOF

$NP_PRGNAM, NP_VERSION $NP_VERSION
A command-line script to print the "Now Playing" status of
a Plex server to stdout.

Example: 'nowplaying -p 192.168.1.1 -w 80 -t <PLEX_AUTH_TOKEN>'

           --help, -h   This screen

  --config, -c <file>   Configuration file. Overrides command args.

      --plex, -p <ip>   IP address(es) or domain name of Plex Server
                        separated by commas, no spaces.
                        Default=127.0.0.1

       --port <number>   Plex port (default: 32400)

    --token, -t <path>   Plex Auth Token, optional point to file.

     --timeout <value>   Time to wait for connection, default=1

      --color <on|off>   Color setting. Default is to attempt to discover
                         your terminal settings and set accordingly.

  --width, -w <number>   Maximum number of columns width.
                         Default=0, "infinite"

         --NP_VERSION, -v  Show NP_VERSION

         --curl <path>  Force curl as downloader.
                        (Path is optional.)

         --wget <path>  Force wget as downloader.
                        (Path is optional.)

        --fetch <path>   Force fetch as downloader.
                         (Path is optional.)

  --netcat,--nc <path>   Force netcat (nc) as downloader.
                         (Path is optional.)
 
         --verbose, -V   Print every error message.

                --file   Point to a XML file for debugging

Configuration:
    If no --config,-c is given, nowplaying will look in:
            ~/.nowplayingrc
            ~/.config/nowplaying.conf
            /usr/local/etc/nowplaying.conf
            /etc/nowplaying.etc

EOF
}

main() {
    ## Optional command-line variables
    plex_host="127.0.0.1"           # Plex server IP(s), separated by space
    plex_port="32400"               # Default port for Plex server
    plex_token=""                   # Auth token for Plex
    config_file=""                  # Location for configuration file
    max_width="0"                   # Set the maximum width of print; 0=infinite
    dot_leader="."                  # Delimiter used for dot leader
    color=""                        # Toggle color output--default is "auto"
    verbose=""                      # Chatty NP_VERSION
    dl_agent=""                     # Either curl, wget, fetch or nc
    skip_checks=""                  # Skip dependency checks
    plex_file=""                    # Optional XML for testing
    timeout=1                       # Timeout for downloading xml file
    
    ## Global accessible variables
    friendly_name="Plex"            # Default server name
    server_path="/"                 # Base path for plex API
    session_path="status/sessions"  # Path for sessions API
    token_arg="?X-Plex-Token="      # Plex token arg
    session_count=0                 # Toggle for active session

    # Search paths for config file

    # Check for conf file first so command args may override
    check_conf

    while [ "$#" -gt 0 ]; do
        case "$1" in 
       --config|-c)
                if [ ! -r "$2" ]; then
                    log_error "$2 config file not found."
                    exit 1
                fi
                config_file="$2"
                shift 2 ;;
         --plex|-p)
                plex_host="$2"
                shift 2 ;;
            --port)
                plex_port="$2"
                shift 2 ;;
        --token|-t)
                plex_token="$2"
                shift 2 ;;
         --timeout)
                timeout="$2"
                shift 2 ;;
        --width|-w)
                max_width="$2"
                shift 2 ;;
        --delim|-d)
		        printf "[%s]: --delim, -d is deprecated\n" "$NP_PRGNAM"
                dot_leader="$2"
                shift 2 ;;
           --color)
                case "$2" in
                    on|off|auto|true|false|yes|no)
                        color="$2" 
                        shift 2 ;;
                    *)
                        color="on"
                        shift 1 ;;
                esac ;;
            --file)
                plex_file="$2"
                shift 2 ;;
        --force|-f)
		        printf "[%s]: --force is deprecated\n" "$NP_PRGNAM"
                skip_checks=1
                shift 1 ;;
            --curl)
                case "$2" in
                    *curl)
                        if [ -x "$2" ]; then
                            dl_agent="$2"
                            shift 2 
                        else
                            printf "[%s]: Error. Cannot find %s.\n" \
                                "$NP_PRGNAM" "$2"
                            exit 1
                        fi
                        ;;
                        *)
                        dl_agent="$(command -v curl)"
                        shift 1 
                esac
                skip_checks=1 ;;

            --wget)
                case "$2" in
                    *wget)
                        if [ -x "$2" ]; then
                            dl_agent="$2"
                            shift 2 
                        else
                            printf "[%s]: Error. Cannot find %s.\n" \
                                "$NP_PRGNAM" "$2"
                            exit 1
                        fi ;;
                        *)
                        dl_agent="$(command -v wget)"
                        shift 1 ;;
                esac
                skip_checks=1 ;;
           --fetch)
                case "$2" in
                    *fetch)
                        if [ -x "$2" ]; then
                            dl_agent="$2"
                            shift 2 
                        else
                            printf "[%s]: Error. Cannot find %s.\n" \
                                "$NP_PRGNAM" "$2"
                            exit 1
                        fi
                        ;;
                        *)
                        dl_agent="$(command -v fetch)"
                        shift 1 ;;
                esac
                skip_checks=1 ;;
    --netcat|--nc)
                case "$2" in
                    *nc)
                        if [ -x "$2" ]; then
                            dl_agent="$2"
                            shift 2 
                        else
                            printf "[%s]: Error. Cannot find %s.\n" \
                                "$NP_PRGNAM" "$2"
                            exit 1
                        fi
                        ;;
                        *)
                        dl_agent="$(command -v nc)"
                        shift 1 ;;
                esac
                skip_checks=1 ;;
      *verbose|-V)
                verbose="1"
                shift 1 ;;
         *help|-h)
                print_help
                exit 0 ;;
      *NP_VERSION|-v)
                printf "%s: %s\n" "$NP_PRGNAM" "$NP_VERSION"
                exit 0 ;;
                 *)
                log_error "$(printf "%s %s%s" "$1" \
                    "is not a valid expression. "\
                    "Try nowplaying --help for help.")"
                exit 1 ;;
        esac
    done

    # Check for environment variables, config file
    if [ -n "$config_file" ]; then
        get_conf
    fi

    # Check for and set download agent
    dependency_check || exit 1

    # Debug mode check, simply cat the given xml file for testing
    if [ -n "$plex_file" ]; then
        parse_session_xml "$(cat "$plex_file")"
        return
    fi

    # Cycle through the given hostnames
    IFS=,
    # shellcheck disable=2086
    set -- ${plex_host}
    for __host in "$@"; do
        if __server_xml="$(get_plexml "server" "$__host")"; then
            __session_xml="$(get_plexml "session" "$__host")"
            parse_server_xml "$__server_xml" "$__host"
            parse_session_xml "$__session_xml" "$__host"
            return
        else
            __retval="$?"
        fi
    done

    if [ -n "$verbose" ]; then
        log_error "No server found at $plex_host (Error code: $__retval)"
    fi
    return "$__retval"
}
main "$@"

#!/usr/bin/env sh

# nowplaying.sh – A simple, POSIX-compliant shell script to print the
# "Now Playing" status of a local Plex Server to stdout.
#
# Copyright 2022 Justin Teague <arcadellama@posteo.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the “Software”),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHE
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

export LC_ALL=C

## Global Variables
prgnam="nowplaying.sh"
version="1.01"

plex_host="127.0.0.1"           # Plex server IP(s), separated by space
max_width="0"                   # Set the maximum width of print; 0=infinite
dot_leader="."                  # Delimiter used for dot leader.
hw_transcode_symbol="•"         # Symbol to show hardware transcode
sw_transcode_symbol="◦"         # Symbol to show software transcode
dl_agent=""                     # Either curl, wget, or fetch
skip_checks=""                  # Skip dependency checks
plex_file=""                    # Optional XML for testing
plex_token=""                   # Auth token for Plex
plexml=""                       # Holds the retrieved Plex XML Status
# color=auto

## Text Color Definitions
# black="\033[30m"
# red="\033[31m"
green="\033[32m"
# yellow="\033[33m"
# blue="\033[34m"
# magenta="\033[35m"
# cyan="\033[36m"
# white="\033[37m"
# 
# ## Text Effect Definitions
bold="\033[1m"
# italic="\033[3m"
# underline="\033[4m"
# 
treset="\033[m"

## Functions
print_help() {
cat <<EOF

$prgnam, version $version
a simple, POSIX-compliant script to print the "Now Playing" status
of a Plex server to stdout.

Example: '"$prgnam" -p 192.168.1.1 -w 80 -d "." -t <PLEX_AUTH_TOKEN>
         
        --plex, -p    IP address(es) or domain name of Plex Server
                      separated by commas, no spaces.
                      Default=127.0.0.1

        --token, -t   Plex Auth Token

        --width, -w   Maximum number of columns width.
                      Default=0, "infinite"

         --help, -h   This screen

      --version, -v   Show version

      --curl <path>   Force curl as downloader.b
                      (Path is optional.)

      --wget <path>   Force wget as downloader.
                      (Path is optional.)

     --fetch <path>   Force fetch as downloader.
                      (Path is optional.)

             --file   Point to a XML file for debugging
EOF
}

dependency_check() {

    if [ -n "$skip_checks" ]; then
        if [ -x "$dl_agent" ]; then
            return 0
        else
            printf "[%s]: Error. Cannot find a download agent.\n" "$prgnam"
            printf "Is curl, wget, or fetch installed?\n"
            return 1
        fi
    fi

    if [ -x "$(command -v curl)" ]; then
        dl_agent="$(command -v curl)"
        return 0
    elif [ -x "$(command -v wget)" ]; then
        dl_agent="$(command -v wget)"
        return 0
    elif [ -x "$(command -v fetch)" ]; then
        dl_agent="$(command -v fetch)"
        return 0
    else
        printf "Error: curl, wget, or fetch not found.\n"
        exit 1
    fi

#    case "$color" in
#        true|yes)
#            color=true ;;
#        auto)
#            [ "$(tput colors)" ] || unset "$color" ;;
#        *)
#            unset "$color" ;;
#    esac

}

truncate_string() {
    __string="$1"
    __width="$2"
    __count="$(((${#__string} - __width) + 3))" # 3 additional for elipses

    while [ "$__count" -gt 0 ]; do
        __string="${__string%?}"
        __count="$((__count - 1))"
    done

    printf "%s..." "$__string"
}

print_delim() {
    __word="$1"
    __width="$2"
    __count=$((__width - __word))
    while [ "$__count" -gt 0 ]; do
        printf "%b%s" "$treset" "$dot_leader"
        __count=$((__count - 1))
    done
}

fix_apostrophe() {
    __input="$1"
    __oldIFS=$IFS
    IFS='&'
    # shellcheck disable=2086
    set -- ${__input}
    case "$2" in
        \#39\;*)
	IFS=$__oldIFS
	printf "%s'%s" "$1" "${2##\#39\;}"
	;;
	*)
	printf "%s" "$1"
    esac
}
	
print_nowplaying() {
    __count="$1"
    __album="$(fix_apostrophe "$2")"
    __title="$(fix_apostrophe "$3")"
    __track="$__title"
    __user="$4"
    __type="$5"
    __transcode="$6"
    __columns=""

    # Set column width
    if [ "$(command -v tput)" ]; then
	__columns="$("$(command -v tput)" cols)"
	if [ "$max_width" -ne 0 ] && [ "$__columns" -gt "$max_width" ]; then
	    __columns="$max_width"
	fi
    else
	if [ "$max_width" -ne 0 ]; then
	    __columns="$max_width"
	else
	    __columns="80"
	fi
    fi

    __col1="$((${#__count} + 1))"
    __col3="$((${#__user} + 1))"
    __col2="$((__columns - (__col3 + __col1) - 4))"


    case "$__type" in
        episode)
              # TV Episodes 
              __title="${__album}: ${__track}"

              # If it doesn't fit, spread over two lines
              if [ "${#__title}" -gt "$__col2" ]; then

                  if [ "${#__album}" -gt "$__col2" ]; then
                  __album="$(truncate_string "$__album" "$__col2")"
                  fi

                  if [ "${#__track}" -gt "$__col2" ]; then
                  __track="$(truncate_string "$__track" "$__col2")"
                  fi
		  __album="${__album}:"
                  # Line 1
                  printf "%b%${__col1}s %-${__col2}s%${__col3}s\n" \
                      "$bold" "$__count." "$__album" "" 
                  # Line 2
                  printf "%${__col1}s %-${__col2}s%b%${__col3}s%b\n" \
                      "" "$__track $(print_delim ${#__track} ${__col2})" \
                      "$bold" "$__user $__transcode" "$treset"
                else

                # Otherwise everything on one line
              printf "%b%${__col1}s %-${__col2}s%b%${__col3}s%b\n" \
                  "$bold" "$__count." \
                  "$__title $(print_delim ${#__title} ${__col2})" \
                  "$bold" "$__user $__transcode" "$treset"
              fi
            ;;

          track)
              # Music tracks
              __title="${__album}: ${__track}"

              # If it doesn't fit, spread over two lines
              if [ "${#__title}" -gt "$__col2" ]; then

                  if [ "${#__album}" -gt "$__col2" ]; then
                  __album="$(truncate_string "$__album" "$__col2")"
                  fi

                  if [ "${#__track}" -gt "$__col2" ]; then
                  __track="$(truncate_string "$__track" "$__col2")"
                  fi

		  __album="${__album}:"

                  # Line 1
                  printf "%b%${__col1}s %-${__col2}s%${__col3}s\n" \
                      "$bold" "$__count." "$__album" ""
                  # Line 2
                  printf "%${__col1}s %-${__col2}s%b%${__col3}s%b\n" \
                      "" "$__track $(print_delim ${#__track} ${__col2})" \
                      "$bold" "$__user $__transcode" "$treset"
                else

                    # All on one line
                  printf "%b%${__col1}s %-${__col2}s%b%${__col3}s%b\n" \
		      "$bold" "$__count." \
                      "$__title $(print_delim ${#__title} ${__col2})" \
                  "$bold" "$__user $__transcode" "$treset"

              fi
            ;;

          movie)
              # Movies
              # Simpler, always on one line, truncated if needed
              if [ "${#__title}" -gt "$__col2" ]; then
                  __title="$(truncate_string "$__title" "$__col2")"
              fi
              printf "%b%${__col1}s %-${__col2}s%b%${__col3}s%b\n" \
                  "$bold" "$__count." \
                  "$__title $(print_delim ${#__title} ${__col2})" \
                  "$bold" "$__user $__transcode" "$treset" 
            ;;
    esac
}

session_url() {
    __host="$1"
    if [ -n "$plex_token" ]; then
        printf "http://%s:32400/status/sessions?X-Plex-Token=%s" \
            "$__host" "$plex_token"
    else
        printf "http://%s:32400/status/sessions" \
            "$__host"
    fi
}

download_session() {
    __url="$1"
    case "$dl_agent" in
        *curl)
            "$dl_agent" -m 2 -s "$__url"
             return "$?"
            ;;
         *wget)
            "$dl_agent" -T 2 -qO - "$__url"
            return "$?" 
            ;;
         *fetch)
            "$dl_agent" -T 2 -qO - "$__url"
            return "$?" 
            ;;
        esac
}

get_plexml() {
    if [ -n "$plex_file" ]; then
        cat "$plex_file"
        return
    fi
    oldIFS=$IFS
    IFS=,
    # we are intentionally word-splitting
    # shellcheck disable=2086
    set -- ${plex_host}
    for __host in "$@"; do
        __url="$(session_url "$__host")" 
        download_session "$__url"
        __retval="$?"
    done
    IFS=$oldIFS
    return "$__retval"
}

parse_plexml() {
    __title=""
    __user=""
    __album=""
    __type=""
    __transcode=""
    __transcode_symbol=""
    __count=0

    # get_plexml -->
    while IFS= read -r line; do
        case "$line" in
            ?Video*|?Track*)
                # Check for type, album, title
                set -f
	            oldIFS=$IFS
	            IFS='"'
	            # shellcheck disable=2086
                set -- ${line}
                while [ "$#" -gt 0 ]; do
                    case "${1## }" in
                        type=)
                            __type="$2"
                            shift 2 ;;
                        grandparentTitle=)
                            __album="$2"
                            shift 2 ;;
                        title=)
                           __title="$2"
                           shift 2 ;;
                            *)
                           shift ;;
                    esac
                done
                IFS=$oldIFS
                set +f
                ;;

            *User\ id*)
                set -f
                oldIFS=$IFS
                IFS='"'
                # shellcheck disable=2086
                set -- ${line}
                while [ "$#" -gt 0 ]; do
                    case "${1## }" in
                        title=)
                            __user="$2"
                            shift 2 ;;
                        *)
                            shift ;;
                    esac
                done
                IFS=$oldIFS
                set +f
                ;;

            *TranscodeSession*)
                set -f
                oldIFS=$IFS
                IFS='"'
                # shellcheck disable=2086
                set -- ${line}
                while [ "$#" -gt 0 ]; do
                    case "${1## }" in
                        transcodeHwFullPipeline=)
                            if [ "$2" = 1 ]; then
                                __transcode_symbol="$hw_transcode_symbol"
                            else
                                __transcode_symbol="$sw_transcode_symbol"
                            fi
                             __transcode="$(printf "%b%s%b" \
                              "$green" "$__transcode_symbol" "$treset")"
                            shift 2 ;;
                        *)
                            shift ;;
                    esac
                done
                IFS=$oldIFS
                set +f
                ;;

      */Video*|*/Track*)
       if [ "$__count" -eq 0 ]; then
           printf "%bNow Playing on Plex:%b\n" "$bold" "$treset"
	   __count="$((__count+1))"
       fi
       print_nowplaying "$__count" "$__album" \
           "$__title" "$__user" "$__type" "$__transcode"
        __count="$((__count+1))"
       continue
       ;;
       esac
    done << EOF
"$plexml"
EOF
if [ "$__count" -eq 0 ]; then
    exit 222
fi
}

main() {
    while [ "$#" -gt 0 ]; do
        case "$1" in 
         --plex|-p)
                plex_host="$2"
                shift 2 ;;
        --token|-t)
                plex_token="$2"
                shift 2 ;;
        --width|-w)
                max_width="$2"
                shift 2 ;;
        --delim|-d)
		        printf "[%s]: --delim, -d is deprecated\n" "$prgnam"
                dot_leader="$2"
                shift 2 ;;
         #--color)
         #     color="yes"
         #     shift 1 ;;
         #  --debug)
         #       debug="1"
         #       shift 1 ;;
            --file)
                plex_file="$2"
                shift 2 ;;
        --force|-f)
		        printf "[%s]: --force is deprecated\n" "$prgnam"
                skip_checks=1
                shift 1 ;;
            --curl)
                case "$2" in
                    *curl)
                        if [ -x "$2" ]; then
                            dl_agent="$2"
                            shift 2 
                        else
                            printf "[%s]: Error. Cannot find %s.\n" \
                                "$prgnam" "$2"
                            exit 1
                        fi
                        ;;
                        *)
                        dl_agent="$(command -v curl)"
                        shift 1 ;;
                esac
                skip_checks=1 ;;

            --wget)
                case "$2" in
                    *wget)
                        if [ -x "$2" ]; then
                            dl_agent="$2"
                            shift 2 
                        else
                            printf "[%s]: Error. Cannot find %s.\n" \
                                "$prgnam" "$2"
                            exit 1
                        fi
                        ;;
                        *)
                        dl_agent="$(command -v wget)"
                        shift 1 ;;
                esac
                skip_checks=1 ;;
           --fetch)
                case "$2" in
                    *fetch)
                        if [ -x "$2" ]; then
                            dl_agent="$2"
                            shift 2 
                        else
                            printf "[%s]: Error. Cannot find %s.\n" \
                                "$prgnam" "$2"
                            exit 1
                        fi
                        ;;
                        *)
                        dl_agent="$(command -v fetch)"
                        shift 1 ;;
                esac
                skip_checks=1 ;;
         --help|-h)
                print_help
                exit 0 ;;
      --version|-v)
                printf "%s: %s\n" "$prgnam" "$version"
                exit 0 ;;
                 *)
	            printf "[%s]: \"%s\" is not a valid expression.\n" \
		        "$prgnam" "$1"
	            printf "Try \"%s\" --help for help.\n" "$prgnam"
                exit 1 ;;
        esac
    done

    if dependency_check; then
        plexml="$(get_plexml)" || exit "$?"
        parse_plexml
    fi
}

main "$@"
